@extends('layout')@section('head')	<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.6.1/css/font-awesome.min.css">	<link href="../assets/plugins/bootstrap/css/bootstrap.min.css" rel="stylesheet" type="text/css" />	<link href="../assets/plugins/fontawesome/css/font-awesome.css" rel="stylesheet" type="text/css" />	<link href="../assets/plugins/css/datepicker.css" rel="stylesheet" type="text/css" />	<link href="../assets/plugins/less/datepicker.less" rel="stylesheet" type="text/css" />	<link href="../assets/main.css" rel="stylesheet" type="text/css" />	<!-- JS -->	<script type="text/javascript" src="../assets/plugins/js/jquery-2.1.4.min.js"></script>	<script type="text/javascript" src="../assets/plugins/js/datepicker.js"></script>	<script src="../assets/plugins/js/moment.js" type="text/javascript"></script>	<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>	<script type="text/javascript">		google.charts.load('current', {packages: ['corechart']});		google.charts.setOnLoadCallback(drawChart);		google.charts.setOnLoadCallback(drawPie);		function drawChart() {				var jsonData = {!! $data !!};				var data = new google.visualization.DataTable(jsonData);				data.addColumn('string', 'Date');				data.addColumn('number', 'Views');				data.addColumn('number', 'Subscribers');				data.addColumn('number', 'Videos');				data.addColumn('number', 'Earnings');				data.addColumn('number', 'Total Views');				data.addColumn('number', 'Total Subscribers');				data.addColumn('number', 'Total Videos');				data.addColumn('number', 'Total Earnings');			var len = Object.keys(jsonData).length;			for(var i = 0; i<len; i++) {				data.addRow([					jsonData[i].date,					jsonData[i].views,					jsonData[i].subscribers,					jsonData[i].videos,					Number(jsonData[i].earnings),					jsonData[i].total_views,					jsonData[i].total_subscribers,					jsonData[i].total_videos,					Number(jsonData[i].total_earnings)				]);			}				// column variables				var viewscolumn = 1;				var subscriberscolumn = 2;				var videoscolumn = 3;				var earningscolumn = 4;				var totalviewscolumn = 5;				var totalsubscriberscolumn = 6;				var totalvideoscolumn = 7;				var totalearningscolumn = 8;				//default options (Views, last 30 days)				var currentdate = moment().format('YYYY-MM-DD');				var currentdateindex = findindex(currentdate,jsonData);				var newdateindex = currentdateindex-30;				var options = {					hAxis: {						viewWindow: {							min: newdateindex,							max: currentdateindex						},					},					backgroundColor: 'none',					chartArea: {						left: 100,						top: 120,						width: '90%',					},					legend: 'none',					height: 500,					pointSize: 5,					pointShape: 'circle'				};				//Generate all stats				//findtotalstats(arrayData);				//default view (Views, last 30 days)				var chart = new google.visualization.LineChart(document.getElementById('mainchart'));				var dataview = new google.visualization.DataView(data);				dataview.setColumns([0,viewscolumn]);				chart.draw(dataview,options);				var text = null;				var all = findtotaldata(jsonData,currentdateindex,newdateindex);				text = all;				document.getElementById('totaldata').innerHTML = text;				//Chart Selection				document.getElementById('chartselector').onchange = function() {					var chartselectedcolumn = eval(this.value+"column");					var dataview = new google.visualization.DataView(data);					dataview.setColumns([0,chartselectedcolumn]);					chart.draw(dataview, {						legend: 'none',						chartArea: {							left: 100,							top: 120,							width: '90%',						},						backgroundColor: 'none',						height: 500,						pointSize: 5,						pointShape: 'circle'					});					changedate();				};				document.getElementById('dateselector').onchange = function() {					changedate();				};				function changedate() {					var currentid = document.getElementById('dateselector');					var currentval = currentid.options[currentid.selectedIndex].value;					var currentdate = moment().format('YYYY-MM-DD');					var currentdateindex;					var newdate;					var newdateindex;					if(currentval == "last90") {						newdate = moment().subtract(89, 'days').format('YYYY-MM-DD');						currentdateindex = findindex(currentdate,jsonData);						newdateindex = findindex(newdate,jsonData);						setfromdate(newdate);						settodate(currentdate);						$('#dateselector').val(currentval);					}					if(currentval == "last30") {						newdate = moment().subtract(29, 'days').format('YYYY-MM-DD');						currentdateindex = findindex(currentdate,jsonData);						newdateindex = findindex(newdate,jsonData);						setfromdate(newdate);						settodate(currentdate);						$('#dateselector').val(currentval);					}					if(currentval == "lastmonth") {						newdate = moment().subtract(1, 'months').date(1).format('YYYY-MM-DD');						currentdate = moment().date(0).format('YYYY-MM-DD');						currentdateindex = findindex(currentdate,jsonData);						newdateindex = findindex(newdate,jsonData);						setfromdate(newdate);						settodate(currentdate);						$('#dateselector').val(currentval);					}					if(currentval == "lifetime") {						newdate = moment().startOf('year').format('YYYY-MM-DD');						currentdate = moment().endOf('year').format('YYYY-MM-DD');						currentdateindex = findindex(currentdate,jsonData);						newdateindex = findindex(newdate,jsonData);						setfromdate(newdate);						settodate(currentdate);						$('#dateselector').val(currentval);					}					if(currentval == "customrange") {						newdate = $('.date-from').val();						currentdate = $('.date-to').val();						currentdateindex = findindex(currentdate,jsonData);						newdateindex = findindex(newdate,jsonData);						setfromdate(newdate);						settodate(currentdate);					}					var text = null;					var all = findtotaldata(jsonData,currentdateindex,newdateindex-1);					text = all;					document.getElementById('totaldata').innerHTML = text;				};				function resizechart() {					var currentchartID = document.getElementById('chartselector');					var currentchartval = currentchartID.options[currentchartID.selectedIndex].value;					var chartselectedcolumn = eval(currentchartval+"column");					var dataview = new google.visualization.DataView(data);					dataview.setColumns([0,chartselectedcolumn]);				};				$(window).resize(function(){					resizechart();				});				function findtotalstats(array) {					var arrayofstats = ["earnings","views","subscribers","partners","videos"];					for(var k=0;k<arrayofstats.length;k++) {						var sum = 0;						for(var i=1;i<array.length;i++) {							sum += array[i][eval(arrayofstats[k]+"column")];						}						var parts = sum.toString().split(".");						if(parts[1]!==undefined) {							var decimal = parts[1];							parts[1] = decimal.slice(0,2);							parts[0] = "$"+parts[0];						}						parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ",");						parts = (parts.join("."));						document.getElementById(arrayofstats[k]).innerHTML = parts;					}				}				function findtotaldata(array,currentdateindex,newdateindex) {					var currentchartID = document.getElementById('chartselector');					var currentchartval = currentchartID.options[currentchartID.selectedIndex].value;					if(currentchartval.indexOf("total")===0) {						currentchartval = currentchartval.split("total").pop();					}					var currentid = document.getElementById('dateselector');					var currentval = currentid.options[currentid.selectedIndex].value;					var date;					var sum=0;					if(currentval == "last90") {//						var newdateindex = currentdateindex-89;						date = "last 90 days";					}					if(currentval == "last30") {//						var newdateindex = currentdateindex-29;						date = "last 30 days";					}					if(currentval == "lastmonth") {						/*var lastmonthbeg = moment().subtract(1, 'months').date(1).format('YYYY-MM-DD');						var newdateindex = findindex(lastmonthbeg,jsonData);						var lastmonthend = moment().date(0).format('YYYY-MM-DD');						var currentdateindex = findindex(lastmonthend,jsonData);*/						date = "last month";					}					if(currentval == "lifetime") {						/*var newdateindex = 1;						 currentdateindex = array.length-1;*/						date = "lifetime";					}					/*					if(currentval.localeCompare("customrange")==0) {					 var beg = $('.date-from').val();					 var newdateindex = findindex(beg,jsonData);					 var end = $('.date-to').val();					 var currentdateindex = findindex(end,jsonData);					 }*/					$.each(array,function([newdateindex,currentdateindex],val) {						sum += val[currentchartval];					});					var parts = sum.toString().split(".");					if(parts[1]!==undefined) {						var decimal = parts[1];						parts[1] = decimal.slice(0,2);						parts[0] = "$"+parts[0];					}					parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ",");					parts = (parts.join("."));					if(currentval == "lifetime") {						return parts+" "+date+" "+currentchartval;					}					if(currentval == "customrange") {						return parts+" total "+currentchartval;					}					return parts+" "+currentchartval+" "+date;				}				$(document).ready(function() {					$('.topofmainchart .input-daterange').datepicker({						format: "yyyy-mm-dd",					});					var currentdate = moment().format('YYYY-MM-DD');					var monthago = moment().subtract(29, 'days').format('YYYY-MM-DD');					$('.date-from').datepicker('setDate', monthago);					$('.date-to').datepicker('setDate', currentdate);				});				$('.date-from').datepicker().on('changeDate',function() {					$('#dateselector').val("customrange");					var currenttodate = $('.date-to').val();					var currentfromdate = $('.date-from').val();					var newdateindex = findindex(currentfromdate,jsonData)-1;					var currentdateindex = findindex(currenttodate,jsonData);					var currentid = document.getElementById('chartselector');					var currentval = currentid.options[currentid.selectedIndex].value;					var chartselectedcolumn = eval(currentval+"column");					var dataview = new google.visualization.DataView(data);					dataview.setColumns([0,chartselectedcolumn]);					chart.draw(dataview,{						hAxis: {viewWindow: {min: newdateindex, max: currentdateindex}},						legend: 'none',						chartArea: {							left: 100,							top: 120,							width: '90%',						},						backgroundColor: 'none',						height: 500,						pointSize: 5,						pointShape: 'circle'					});					var text = null;					var all = findtotaldata(jsonData,currentdateindex,newdateindex);					text = all;					document.getElementById('totaldata').innerHTML = text;				});				$('.date-to').datepicker().on('changeDate',function(){					$('#dateselector').val("customrange");					var currenttodate = $('.date-to').val();					var currentfromdate = $('.date-from').val();					var newdateindex = findindex(currentfromdate,jsonData)-1;					var currentdateindex = findindex(currenttodate,jsonData);					var currentid = document.getElementById('chartselector');					var currentval = currentid.options[currentid.selectedIndex].value;					var chartselectedcolumn = eval(currentval+"column");					var dataview = new google.visualization.DataView(data);					dataview.setColumns([0,chartselectedcolumn]);					chart.draw(dataview,{						hAxis: {viewWindow: {min: newdateindex, max: currentdateindex}},						legend: 'none',						chartArea: {							left: 100,							top: 120,							width: '90%',						},						backgroundColor: 'none',						height: 500,						pointSize: 5,						pointShape: 'circle'					});					var text = null;					var all = findtotaldata(jsonData,currentdateindex,newdateindex);					text = all;					document.getElementById('totaldata').innerHTML = text;				});				function setfromdate(from) {					$('.date-from').datepicker({						format: 'yyyy-mm-dd',					});					$('.date-from').datepicker('setDate', from);				}				function settodate(to) {					$('.date-to').datepicker({						format: 'yyyy-mm-dd',					});					$('.date-to').datepicker('setDate', to);				}			function findindex(date,json) {				for(i = 0; i < json.length; i++)				{					if(date === json[i].date)					{						return json[i].id;					}				}			}		}; // End of drawChart/*		function drawPie() {			//Grabs csv file			$.get("../assets/data/applications.csv", function(csvString) {				//Transforms csv to 2d array				var arrayData = $.csv.toArrays(csvString, {onParseValue: $.csv.hooks.castToScalar});				// Creates new object that holds data				var data = new google.visualization.arrayToDataTable(arrayData);				var options = {					chartArea: {						top: 50,						width: '90%',					},					backgroundColor: 'none',					legend: {						position: 'right',						alignment: 'center',					},					pieSliceText: 'value',					height: 500,					pieHole: 0.5,				};				//default view (Views, last 30 days)				var chart = new google.visualization.PieChart(document.getElementById('piechart'));				var dataview = new google.visualization.DataView(data);				chart.draw(dataview,options);				function resizechart() {					var chart = new google.visualization.PieChart(document.getElementById('piechart'));					var dataview = new google.visualization.DataView(data);					chart.draw(dataview,options);				};				$(document).ready(function() {					var text = null;					var linked = arrayData[1][1];					var all = findnumberofapplications(arrayData);					var conversion = Math.round(linked/all*100);					if(conversion > 70) {						text = conversion+"% conversion rate, Nice!";					}					if(conversion < 70 && conversion > 30) {						text = conversion+"% conversion rate, Not Bad.";					}					if(conversion<30) {						text = conversion+"% conversion rate, Keep Impmroving!";					}					//for()					document.getElementById('conversion').innerHTML = text;				});				function findnumberofapplications(array) {					var sum = 0;					for(var i=1; i <array.length;i++) {						sum += array[i][1];					}					return sum;				}				$(window).resize(function(){					resizechart();				});			});		};*/	</script>@stop@section('dashboard')	<div class="container">		@if (\Session::has('loggedin'))			<div class="alert alert-success">				<ul>					<li>{!! \Session::get('loggedin') !!}</li>				</ul>			</div>		@endif		<ul class="nav nav-pills">			<li>				<a href="{!! url('logout') !!}">Logout</a>			</li>		</ul>		<ul class="nav nav-pills">			<li>				{{--{{ $data }}--}}			</li>		</ul>	</div>			<!-- NAVIGATION -->			<div class="topNav">				<img src="../assets/images/BannerWhite.png" style="width:200px;"/>				<ul class="navButtons">					<li><a>Home <span class="fa fa-home"></a></span></li>					<li><a>Applications <span class="fa fa-wpforms"></a></li>					<li><a>Partners <span class="fa fa-user fa-1x"></a></li>					<li class="active"><a>Analytics <span class="fa fa-line-chart"></a></li>					<li class="last"><a>Earnings <span class="fa fa-dollar"></a></li>				</ul>			</div>			<!-- END OF NAV -->			<div class="dashboard">				<!-- MAIN CHART DATA -->				<div class="mainContent">					<div class="row">						<div class="wrapper">							<section class="overallcontainer">								<span class="charttop">Overall Statistics</span>								<div class="col-md-2 col-md-offset-1">Earnings									<p id="earnings"></p>								</div>								<div class="col-md-2">Views									<p id="views"></p>								</div>								<div class="col-md-2">Subscribers									<p id="subscribers"></p>								</div>								<div class="col-md-2">Partners									<p id="partners"></p>								</div>								<div class="col-md-2">Videos									<p id="videos"></p>								</div>							</section>						</div>					</div> <!-- END OF FIRST ROW -->					<div class="row">						<div class="wrapper">							<section class="mainchartcontainer">								<div class="charttop">Statistics									<div id="totaldata" style="float: right;padding-right:15px;"></div>								</div>								<div class="topofmainchart">									<select title="chartselector" id="chartselector" >										<option value="views" selected>Views</option>										<option value="subscribers">Subscribers</option>										<option value="videos">Videos</option>										<option value="earnings">Earnings</option>										<option value="totalviews">Total Views</option>										<option value="totalsubscribers" >Total Subscribers</option>										<option value="totalvideos">Total Videos</option>										<option value="totalearnings">Total Earnings</option>									</select>									<select title="dateselector" id="dateselector">										<option value="customrange" disabled>Custom Range</option>										<option value="last30" selected>Last 30 Days</option>										<option value="lastmonth">Last Month</option>										<option value="last90">Last 90 Days</option>										<option value="lifetime">Lifetime</option>									</select>									<div class="input-daterange input-group" id="datepicker">										<input type="text" class="date-from form-control" name="start"/>										<span class="input-group-addon">to</span>										<input type="text" class="date-to form-control" name="end"/>									</div>								</div>								<div id="mainchart"></div>							</section> <!-- END OF MAIN CHART DATA -->							<section class="piechartcontainer">								<span class="charttop">Applications</span>								<div id="piechart"></div>								<p class="pieinfo" id="conversion"></p>							</section>						</div>					</div>				</div> <!-- END OF SECOND ROW -->			</div>@stop